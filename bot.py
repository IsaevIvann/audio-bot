import os
import json
from telegram import Update, InlineQueryResultCachedVoice
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from config import BOT_TOKEN, AUDIO_DIR, DB_FILE
from telegram import InlineQueryResultVoice
from telegram.ext import InlineQueryHandler
from datetime import date
import random

today_cache = {
    "date": None,
    "name": None
}


# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∞—É–¥–∏–æ
if os.path.exists(DB_FILE):
    with open(DB_FILE, "r") as f:
        audio_db = json.load(f)
else:
    audio_db = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –∞—É–¥–∏–æ
def save_db():
    with open(DB_FILE, "w") as f:
        json.dump(audio_db, f, indent=2)

# –ü–∞–º—è—Ç—å: user_id -> name (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ)
pending_adds = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                    "/add <–∏–º—è> ‚Äî —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ\n"
                                    "/send <–∏–º—è> ‚Äî —á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏\n"
                                    "/list ‚Äî —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫")

# /add <name> ‚Äî –æ–∂–∏–¥–∞–µ–º –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ
async def add_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –∏–º—è: /add –ø—Ä–∏–≤–µ—Ç")
        return

    name = context.args[0].lower()
    user_id = update.effective_user.id
    pending_adds[user_id] = name

    await update.message.reply_text(f"üé§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫: {name}")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = update.message.voice or update.message.audio

    if not file:
        return

    if user_id not in pending_adds:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ /add <–∏–º—è>")
        return

    name = pending_adds.pop(user_id)
    file_id = file.file_id

    audio_db[name] = {
        "file_id": file_id,
        "title": name
    }
    save_db()

    await update.message.reply_text(f"‚úÖ –ê—É–¥–∏–æ '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π /send {name}")

async def send_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –∏–º—è: /send –ø—Ä–∏–≤–µ—Ç")
        return

    name = context.args[0].lower()
    data = audio_db.get(name)

    if not data:
        await update.message.reply_text("üö´ –ê—É–¥–∏–æ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await update.message.reply_voice(voice=data["file_id"])

# /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
async def list_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not audio_db:
        await update.message.reply_text("üóÇ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add <–∏–º—è>.")
        return

    msg = "üéµ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ:\n"
    for name in audio_db:
        msg += f"‚Ä¢ {name}\n"

    await update.message.reply_text(msg)

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower()
    print(f"üîç Inline-–∑–∞–ø—Ä–æ—Å: {query}")

    results = []

    for name, data in audio_db.items():
        if isinstance(data, dict) and "file_id" in data and query in name:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name}")
            results.append(
                InlineQueryResultCachedVoice(
                    id=f"voice_{hash(name)}",
                    voice_file_id=data["file_id"],
                    title=name
                )
            )

    await update.inline_query.answer(results[:10], cache_time=1)

async def sound_of_the_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not audio_db:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ.")
        return

    today_str = str(date.today())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∑–≤—É–∫
    if today_cache["date"] != today_str:
        today_cache["date"] = today_str
        today_cache["name"] = random.choice(list(audio_db.keys()))

    name = today_cache["name"]
    file_id = audio_db[name]["file_id"]

    await update.message.reply_voice(
        voice=file_id,
        caption=f"üéß –ó–≤—É–∫ –¥–Ω—è: *{name}*",
        parse_mode="Markdown"
    )



# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_audio))
    app.add_handler(CommandHandler("send", send_audio))
    app.add_handler(CommandHandler("list", list_audio))
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(CommandHandler("today", sound_of_the_day))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
